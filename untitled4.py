# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XFfto04E9ijOXj2l8A_c6H0AHVFOIOQ7
"""

import numpy as np

class NeuralNetwork:
    def __init__(self, x, y):
        self.input = x
        self.weights1 = np.random.rand(self.input.shape[1],4)
        self.weights2 = np.random.rand(4,1)
        self.y = y
        self.output = np.zeros(self.y.shape)
    
    def forward(self):
        self.layer1 = sigmoid(np.dot(self.input, self.weights1))
        self.output = sigmoid(np.dot(self.layer1, self.weights2))
    
    def backward(self):
        d_weights2 = np.dot(self.layer1.T, (2*(self.y - self.output) * sigmoid_derivative(self.output)))
        d_weights1 = np.dot(self.input.T,  (np.dot(2*(self.y - self.output) * sigmoid_derivative(self.output), self.weights2.T) * sigmoid_derivative(self.layer1)))
    
        self.weights1 += d_weights1
        self.weights2 += d_weights2
    
    def train(self, epochs):
        for i in range(epochs):
            self.forward()
            self.backward()

# sigmoid activation function
def sigmoid(x):
    return 1/(1+np.exp(-x))

# derivative of sigmoid function
def sigmoid_derivative(x):
    return x * (1 - x)

# input dataset
X = np.array([[0,0,1],[0,1,1],[1,0,1],[1,1,1]])

# output dataset
y = np.array([[0],[1],[1],[0]])

# create neural network
nn = NeuralNetwork(X,y)

# train neural network
nn.train(1500)

# print output
print(nn.output)